#!/usr/bin/env node

/**
 * モジュールの依存関係。
 */

var app = require('../app');
var debug = require('debug')('auth-micro:server');
var http = require('http');

/**
 * 環境変数からポートを取得し、Expressに設定する。
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * HTTPサーバーを作成する。
 */

var server = http.createServer(app);

/**
 * 指定されたポートで、すべてのネットワークインターフェースに対してリッスンする。
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * ポートを数値、文字列、またはfalseに正規化する関数。
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // 名前付きパイプ
    return val;
  }

  if (port >= 0) {
    // ポート番号
    return port;
  }

  return false;
}

/**
 * HTTPサーバーの"error"イベントのイベントリスナー。
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // 特定のリッスンエラーをわかりやすいメッセージで処理する
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * HTTPサーバーの"listening"イベントのイベントリスナー。
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// HTTPSサポートの設定
const https = require('https');
const fs = require('fs');

// SSL証明書のオプションを設定
const options = {
  key: fs.readFileSync('path/to/key.pem'),
  cert: fs.readFileSync('path/to/cert.pem')
};

// HTTPSサーバーを作成し、ポート443でリッスンする
https.createServer(options, app).listen(443);