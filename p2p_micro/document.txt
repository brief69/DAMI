[p2p_micro]ディレクトリは、P2P通信を実現するためのマイクロサービスプロジェクトです。
このプロジェクトはGo言語で書かれており、以下の主な特徴があります：

- **通信プロトコルの管理**：TCP, UDP, WebRTCなどのプロトコルをサポートしています。
具体的な実装は`p2p_micro/pkg/communication`ディレクトリ内の`p2p.go`, `webrtc.go`, `websocket.go`ファイルに分かれています。

- **データフォーマットのサポート**：JSON, XML, Protobufなどのデータフォーマットをサポートしています。
`protobuf.go`ファイルにはProtocol Buffersを使用したシリアライゼーションのコードが含まれています。

- **JWT認証と認可**：`jwt.go`ファイルにはJWTを使用した認証機能の基本的な実装が含まれています。

- **ファイル共有機能**：`filesharing.go`ファイルにはファイル共有のためのハンドラーが実装されています。

- **ピア発見**：`discovery.go`ファイルにはピア発見のための設定が含まれています。

- **セキュリティ**：`security.go`ファイルにはセキュリティプロトコルの設定が含まれています。

プロジェクトの依存関係は`go.mod`ファイルに記載されている。

プロジェクトの概要と特徴は`README.md`に詳しく記載されています。
`go run cmd/p2p_microservice/main.go`コマンドでサービスを起動できます。

libp2pノードの初期化: libp2pネットワークに参加するためのノードを初期化します。
DHTの初期化: libp2pのDHTを初期化し、ネットワークに参加します。
データのハッシュ化: 送信するデータをハッシュ化します。
DHTを使用してデータの存在確認: ハッシュ化したデータをキーとしてDHTを検索し、同一のデータがネットワーク内に存在するかを確認します。
データの送信または参照: 同一のデータが存在しない場合は、データをネットワークに送信します。存在する場合は、既存のデータを参照します。

libp2pアプリケーションを複数のプロセスに分割し、
データの種類に応じて異なるP2Pスタックを使用する設計は、システムの柔軟性と耐障害性を高める効果的な方法です。
特定のデータタイプ（例：動画、ライブストリーミング、その他のデータ）に最適化された通信プロトコルを選択し、
使用することができます。データタイプを識別し、それに応じて適切なP2Pスタックを選択するロジックを実装する必要があります。
ファイルの説明
cmd/main.go: アプリケーションのエントリーポイント。libp2pノードの起動と基本的な設定を行います。
pkg/p2pconfig/config.go: 異なるP2Pスタックの設定と初期化を行うコードを含みます。例えば、動画データ用、ライブストリーミングデータ用など、データタイプに応じたP2Pスタックの設定をここで行います。
pkg/datatypes/types.go: データタイプ（例：動画、ライブストリーミング、その他）を定義するコードを含みます。これにより、データタイプに基づいて処理を分岐させることができます。
pkg/dispatcher/dispatcher.go: データタイプに基づいて適切なP2Pスタックを選択し、データを振り分けるロジックを実装します。このファイルでは、datatypesで定義されたデータタイプを使用して、p2pconfigで設定されたP2Pスタックにデータをルーティングします。
この構成は、機能ごとに責任を分割し、将来的な拡張やメンテナンスを容易にすることを目的としています。また、libp2pを使用したP2P通信の設定と管理に関連するコードをp2p_microディレクトリ内に集約することで、プロジェクトの構造を明確にし、可読性を高めます。


p2p_microプロジェクトの要件を明確にするために、以下の機能を定義します。
スケーラビリティ: p2p_microは、世界一スケーラブルなピアツーピア通信マイクロサービスを目指します。これを達成するために、libp2pのDHT（分散ハッシュテーブル）を活用し、ネットワーク内でのデータの効率的な検出と配布を行います。
データの重複排除: gql_microが要求するデータがp2p_microを通じて既にネットワーク内に存在する場合、そのデータの重複保存を避けます。DHTを利用してデータの存在を確認し、存在しない場合のみ保存します。
データの参照とクエリ生成: ネットワーク内に存在するデータに対して、gql_microからのクエリを自動生成し、データへの参照を可能にします。これにより、データの送信者側からでも、保存されているデータに対して効率的にアクセスできるようになります。
分散AI (gcn_micro) の統合: gcn_microは、gql_microでのデータ参照やp2p_microを通じたピア間の通信を、説明可能な分散AIとして処理します。gcn_microも分散的に存在し、システム全体のスケーラビリティと耐障害性を高めます。
これらの要件を満たすために、p2p_micro内での具体的な実装ステップは以下の通りです。
DHTを利用したデータの検出と保存のロジックの実装: データがネットワーク内に存在するかどうかをDHTを通じて確認し、存在しない場合のみデータを保存するロジックを実装します。
データ参照のためのクエリ自動生成機能の実装: gql_microからの要求に基づいて、ネットワーク内のデータへのクエリを自動生成し、データへの参照を容易にします。
gcn_microとの連携: 分散AI (gcn_micro) との連携を実現するためのインターフェースを定義し、gql_microとp2p_microのデータや通信をgcn_microが処理できるようにします。
これらの機能を実装することで、p2p_microは高度にスケーラブルで、データの重複を避け、効率的なデータ参照と分散AIの統合を実現するマイクロサービスとなります。

DHTでネットワークに同一データが存在しないことがわかった場合、データをネットワークに保存する。一方、DHTでネットワークに同一データが存在することがわかった場合、すでに存在したデータを参照するようにglahqlのクエリを自動的に作成します。